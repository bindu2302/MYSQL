-- Group by clause
-- -------------------------------------
-- clause is a keyword which comes within a query along with the command
-- Group by clause: The group by clause in SQL is used to group the rows that have the same values on specified columns into summary rows.
-- It is often ued with aggregate functions like MIN(),MAX(),AVG(),SUM() etc. to perform calcultaions on each group of data


CREATE TABLE employee_sales (
  employee_name   VARCHAR(50),
  department      VARCHAR(50),
  sale_amount     DECIMAL(10,2)
);

INSERT INTO employee_sales (employee_name, department, sale_amount) VALUES
  ('Alice',   'Electronics',  100.00),
  ('Bob',     'Electronics',  150.00),
  ('Charlie', 'Clothing',     200.00),
  ('Diana',   'Clothing',     120.00),
  ('Evan',    'Electronics',  130.00),
  ('Fiona',   'Clothing',     180.00);

select * from employee_sales;

CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    region VARCHAR(50),
    product VARCHAR(50),
    quantity INT,
    price_per_unit DECIMAL(10, 2),
    sale_date DATE
);


INSERT INTO Sales VALUES
(1, 'North', 'Laptop', 2, 50000.00, '2024-01-10'),
(2, 'South', 'Laptop', 1, 48000.00, '2024-01-12'),
(3, 'North', 'Tablet', 5, 15000.00, '2024-02-10'),
(4, 'West', 'Laptop', 3, 52000.00, '2024-02-15'),
(5, 'South', 'Tablet', 2, 14000.00, '2024-03-01'),
(6, 'North', 'Laptop', 1, 51000.00, '2024-03-05'),
(7, 'East', 'Laptop', 4, 53000.00, '2024-04-01'),
(8, 'East', 'Tablet', 2, 14500.00, '2024-04-03');

select * from Sales;

-- 1. Count Sales by Department
-- Q: Write a query to show how many sales records exist for each department and sort the count in asc order.

SELECT
  department,
  COUNT(*) AS sales_count
FROM
  employee_sales
GROUP BY
  Department
Order by sales_count;


-- 2. Total Sales by Department
-- Q: Write a query to show the total sale_amount for each department and display the result in desc Order.
 
SELECT
  department,
  SUM(sale_amount) AS total_sales
FROM
  employee_sales
GROUP BY
  Department order by total_sales;


-- 3. Average Sale per Department
-- Q: Write a query to find the average sale amount (avg_sale) for each department.

SELECT
  department,
  AVG(sale_amount) AS avg_sale
FROM
  employee_sales
GROUP BY
  department;


-- 4. Number of Unique Sellers per Department
-- Q: Write a query to show how many distinct employee names made sales in each department.

SELECT
  department,
  COUNT(DISTINCT employee_name) AS unique_sellers
FROM
  employee_sales
GROUP BY
  department;


-- 5. Minimum and Maximum Sale by Department
-- Q: Write a query to display the smallest (min_sale) and largest (max_sale) sale amounts for each department.

SELECT
  department,
  MIN(sale_amount) AS min_sale,
  MAX(sale_amount) AS max_sale
FROM
  employee_sales
GROUP BY
  department;
  
-- FROM → WHERE → GROUP BY → Aggregate Functions → HAVING → SELECT → ORDER BY → LIMIT

  
-- 6. Write a query to find the top 2 regions that have sold more than 2 units of 'Laptop' in total.
-- Display the region, total quantity sold as total_quantity, and the total revenue (total_quantity * AVG(price_per_unit)) as total_revenue.
-- Order the results by total_revenue in descending order.

select region,sum(quantity) as total_quantity,(sum(quantity) * avg(price_per_unit)) as total_revenue
from Sales
where product = 'Laptop'
group by region
having sum(quantity) > 2
order by total_revenue DESC
LIMIT 2;


-- 7. Write an SQL query to:
-- Consider only the sales that occurred in the year 2024.
-- Calculate total revenue for each product using quantity * price_per_unit.
-- Display the product name, total quantity sold (total_quantity), and total revenue (total_revenue).
-- Only include those products whose total revenue is greater than ₹100,000.
-- Sort the results by total_revenue in descending order.
-- Return only the top 3 products based on revenue.

SELECT 
    product,
    SUM(quantity) AS total_quantity,
    SUM(quantity * price_per_unit) AS total_revenue
FROM 
    Sales
WHERE 
    sale_date BETWEEN '2024-01-01' AND '2024-12-31'
GROUP BY 
    product
HAVING 
    total_revenue > 100000
ORDER BY 
    total_revenue DESC
LIMIT 3;


Notes: 
https://docs.google.com/document/d/1nDM1OWp9bu51gUikwbKptIRHXfGleJ4raAy6qE9WbYY/edit?tab=t.0
