-- Practice queries using raw data  STRING FUNCTIONS


-- substr(STRING,START,LENGTH(OPTIONAL)):
select SUBSTR('KODNEST',4,2);
SELECT SUBSTR('RAJA RAM',6,3);
SELECT SUBSTR('JHGFDSFGHJKL',-1);


-- INSTR(STRING,'SUBSTRING')  -POSTITION OF STRING
SELECT INSTR('eKODNESTe','E');


-- trim
SELECT TRIM(LEADING 'T' FROM 'KODNEST');
SELECT TRIM(TRAILING 'T' FROM 'KODNEST');
SELECT TRIM(BOTH 'T' FROM 'TODNEST');
SELECT TRIM(BOTH '' FROM ' ODNEST');
select trim('x' from 'xxxxxxxhelloxx');
select trim(leading 'x' from 'xxhelloxxx');
select trim(trailing 'x' from 'xxxhelloxx');

-- LPAD,RPAD:
SELECT LPAD('KODNEST',15,'@');
SELECT RPAD('KODNEST',15,'*');
select lpad('Bindu',10,'-');
select rpad('kalyan',10,'-');


-- LEFT AND RIGHT:

SELECT LEFT('KODNEST',3);
SELECT SUBSTR('KODNEST',1,3);
select right('Bindu',3);
select substr('bindu',-3);

select left('bindu',2);
select substr('bindu',1,2);

SELECT RIGHT('KODNEST',3);
SELECT SUBSTR('KODNEST',-3);

SELECT RIGHT('WERTYUIKNBE',1);

-- ASCII():
SELECT ASCII('APPLE'); -- 65
select ascii('apple'); -- 97

-- concat();
SELECT CONCAT('K','B','nara');


-- using table

drop table employee;

create table employee(emp_id int, emp_name varchar(50), emp_city varchar(50));

insert into employee values(1,'john','new york'),(2,'alice','boston'),(3,'robert','san'),(4,'anitha','chicago'),(5,'kevin','los angeles');

select * from employee;

select upper(emp_name) from employee;

select upper(emp_city) from employee;

select emp_name,upper(left(emp_name,4)) from employee;


select emp_name,upper(right(emp_name,3)) from employee;

select emp_name,emp_city,concat(emp_name,' from ',emp_city) from employee;

select emp_name,substr(emp_name,2,4) as substr_name from employee;

select emp_name,instr(emp_name,'o') as pos_o from employee;

select emp_id,lpad(emp_id,5,'0') as padded_left from employee;

select emp_name,reverse(emp_name),length(emp_name) from employee;

-- Number functions

-- mod()
select mod(10,2) as remainder;
select mod(10,9) as remainder;

-- abs(absolute)
select abs(-20); -- 20
select abs(2/10-5000); -- 4999.8000

-- round(number,digits after decimal(+ve/-ve))
select round(99.99,0); -- 100
select round(99.99,1); -- 100.0
select round(689.9438,3); -- 689.944
select round(99.9999,2); -- 100.00
select round(699.999,2); -- 700.00
select round(968.328,-2); -- 1000
select round(9968.683,-3); -- 10000
select round(9996.823,-4); -- 10000
select round(159.93490,-2); -- 200
select round(159.43590,-1); -- 160
select round(49.93490,-2); -- 0
select round(4813.689,-4); -- 0
select round(340.78900,-2); -- 300

-- pow()/power()
select power(2,2); -- 4
select pow(2,3); -- 8

-- sqrt()
select sqrt(16); -- 4
select sqrt(49); -- 7
select sqrt(144); -- 12

-- ceil()/ceiling()
select ceil(45.2); -- 46
select ceil(99.01); -- 100
select ceil(99.001); -- 100
select ceil(89.1); -- 90
select ceil(-966789.9876); -- 966789
select ceil(-29.90); -- 29
select ceil(-99.99); -- 99

-- floor()
select floor(45.2); -- 45
select floor(99.99); -- 99
select floor(6879.578); -- 6879
select floor(-8.99); -- -9
select floor(-88.99); -- -89
select floor(-1.99); -- -2


-- Date and Time functions

-- date() and time()
select date('2025-05-06 11:11:02') as date_part;
select time('2025-05-06 11:11:02') as time_part;

-- Returns current date and time
select sysdate(); -- execute the function when fucntion is started
select localtimestamp(); -- alt to now()
select localtime(); -- alt to now()
select now(); -- current date & time when query execution started

-- Returns current date and current time
select current_date(), curdate();
select current_time(), curtime();

-- Timestampdiff(unit,date1(past),date2(future)) : date2 - date1
select timestampdiff(day,'2025-05-24','2026-05-24'); -- 365
select timestampdiff(day,'2025-06-24','2020-06-20'); -- -1830
select timestampdiff(week,'2025-05-24','2026-05-24'); -- 52
select timestampdiff(year,'2025-05-24','2026-05-24'); -- 1
select timestampdiff(hour,'2025-05-24','2026-05-24'); -- 8760
select timestampdiff(minute,'2025-05-24','2026-05-24'); -- 525600
select timestampdiff(second,'2025-05-24','2026-05-24'); -- 31536000


-- datediff(date1(future),date2(past)): date1 - date2
select datediff('2025-05-24','2026-05-24'); -- -365
select datediff('2026-05-24','2025-05-24'); -- 365

-- date_add(date,interval amount unit)
select date_add('2025-05-24', interval 3 day) as after_3_days; -- 2025-05-27
select date_add('2025-05-24', interval 4 week) as after_4_weeks; -- 2025-06-21
select date_add('2025-05-24', interval 3 month) as after_3_months; -- 2025-08-24
select date_add('2025-05-24', interval 3 year) as after_3_years; -- 2028-05-24
select date_add('2025-05-24', interval 3 hour) as after_3_hour; -- 2025-05-24 03:00:00
select date_add('2025-05-24', interval 3 minute) as after_3_minute; -- 2025-05-24 00:03:00
select date_add('2025-05-24', interval 3 second) as after_3_seconds; -- 2025-05-24 00:00:03

-- day,month,year
select day('2025-05-24'); -- 24
select month('2025-05-24'); -- 05
select year('2025-05-24'); -- 2025
select yearweek('2025-05-24'); -- 202520

-- dayname() , monthname()
select dayname('2025-05-24'); -- Saturday
select monthname('2025-05-24'); -- May



-- Control flow Functions
-- 1. IF(): Returns one value if the condition is true, another if false
-- syntax: if(condition,true_value,false_value)   ex: select if(100>50,'High','low');

select if(10>5,'10 is greater','10 is not greater') as result; -- 10 is greater
select if(10+7>30,10+10,5+5); -- 10
select if(100+7>30,10+10,5+5); -- 20

-- 2. IFNULL(): Returns the first argument if it's not NULL, otherwise returns the second. -- replace null
-- syntax: IFNULL(exp1,exp2)   ex: select ifnull(null,'default'); -> 'default'

select ifnull(10+30,50) as result; -- 40
select ifnull(null,50) as result; -- 50

-- 3. NULLIF(): Returns null if both arguments are equal, otherwisw returns the first. -- insert null 
-- syntax: NULLIF(exp1,exp2)   ex: select bullif(100,100); -> null

select nullif(10,10); -- null
select nullif(10,100); -- 10

-- 4. Evaluates conditions and returns the result for the first true condition. Similar to switch-case in other languages.
-- syntax: 
-- CASE
--   WHEN condition1 then result1
--   WHEN condition2 then result2
--   ...
--   ELSE default_result
--   END
     
     
select 
	CASE 
		WHEN 85 >= 90 THEN 'A'
		WHEN 85 >= 80 THEN 'B'
        ELSE 'C'
	END AS Grade; -- B

select 
	CASE 
		WHEN 99 >= 90 THEN 'A'
		WHEN 98 >= 80 THEN 'B'
        ELSE 'C'
	END AS Grade; -- A


-- 5. COALESCE(): Returns the first non-null value in a list.
-- syntax: COALESCE(value1,value2,..., value_n);

select coalesce(null,null, 40,60,70,null) as result; -- 40
select coalesce('priya',40,60,70,null) as result; -- priya








